generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  String
  servers   Server[]
  members   Member[]
  channels  Channel[]
  settings  Setting[]
}

model Server {
  id            String         @id @default(uuid())
  name          String
  imageUrl      String
  inviteCode    String         @unique
  profileId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members       Member[]
  channels      Channel[]
  notifications Notification[]

  @@index([profileId])
}

model Member {
  id                     String               @id @default(uuid())
  role                   MemberRole           @default(GUEST)
  profileId              String
  serverId               String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  isOnline               Boolean              @default(false)
  profile                Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                 Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages               Message[]
  directMessages         DirectMessage[]
  notifications          MemberNotification[]
  conversationsInitiated Conversation[]       @relation("MemberOne")
  conversationsReceived  Conversation[]       @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  serverId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  fileUrl   String?
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  memberId       String
  conversationId String
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}

model Setting {
  id          String   @id @default(uuid())
  color       String
  displayName String
  bio         String
  status      String
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Notification {
  id              String               @id @default(uuid())
  message         String
  redirectMessage String?
  serverId        String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  server          Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)
  members         MemberNotification[]

  @@index([serverId])
}

model MemberNotification {
  id             String       @id @default(uuid())
  read           Boolean      @default(false)
  memberId       String
  notificationId String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([memberId, notificationId])
  @@index([notificationId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}
